{"version":3,"sources":["styles/globalStyles.js","App.js","redux/blockchain/blockchainActions.js","reportWebVitals.js","index.js","redux/data/dataActions.js","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js"],"names":["Screen","styled","div","image","SpacerXSmall","SpacerSmall","SpacerMedium","Container","flex","fd","jc","ai","test","TextTitle","p","TextSubTitle","TextDescription","ResponsiveWrapper","StyledButton","button","auth","Buffer","from","projectId","toString","ipfsClient","create","host","port","protocol","headers","authorization","App","dispatch","useDispatch","blockchain","useSelector","state","data","useState","loading","setLoading","status","setStatus","NFTS","setNFTS","elementRef","useRef","ipfsBaseUrl","name","setName","background","setBackground","createMetaDataAndMint","_name","_des","_imgBuffer","a","add","addedImage","metaDataObj","description","path","JSON","stringify","addedMetaData","console","log","_uri","smartContract","methods","mint","account","send","once","err","then","receipt","clearCanvas","fetchData","getImageData","dataUrl","current","toDataURL","split","fetchMetaDataforNFTS","allTokens","forEach","nft","fetch","uri","response","json","metaData","prevState","id","clear","useEffect","onClick","e","preventDefault","connect","errorMsg","style","color","href","textAlign","fontSize","action","type","value","onChange","target","backgroundColor","canvasProps","width","height","ref","onSubmit","padding","map","index","alt","src","connectFailed","payload","Accept","abiResponse","abi","configResponse","CONFIG","window","ethereum","isMetaMask","Web3EthContract","setProvider","web3","Web3","request","method","accounts","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","on","updateAccount","location","reload","NAME","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","store","document","getElementById","fetchDataFailed","getState","call","getAllTokens","initialState","blockchainReducer","error","dataReducer","rootReducer","combineReducers","middleware","thunk","composeEnhancers","compose","applyMiddleware","createStore"],"mappings":"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","file":"static/js/main.d7851ff6.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n// Used for wrapping a page component\r\nexport const Screen = styled.div`\r\n  background-color: var(--dark-grey);\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// Used for wrapping a page component better?\r\nexport const ScreenWrap = styled.div`\r\n  background-color: var(--dark-grey);\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 100%;\r\n  min-height: auto;\r\n  display: flex-wrap;\r\n  flex-direction: row;\r\n`;\r\n\r\n\r\n\r\n// Used for providing space between components\r\nexport const SpacerXSmall = styled.div`\r\n  height: 8px;\r\n  width: 8px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerSmall = styled.div`\r\n  height: 16px;\r\n  width: 16px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerMedium = styled.div`\r\n  height: 24px;\r\n  width: 24px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerLarge = styled.div`\r\n  height: 32px;\r\n  width: 32px;\r\n`;\r\n\r\n// Used for providing a wrapper around a component\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex: ${({ flex }) => (flex ? flex : 0)};\r\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\r\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\r\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\r\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\r\n  width: 100%;\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n`;\r\n\r\n// Used for providing a wrapper around a component\r\nexport const Container1 = styled.div`\r\ndisplay: flex;\r\nflex: ${({ flex }) => (flex ? flex : 0)};\r\njustify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\r\nflex-direction: column;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\nwidth: 100%;\r\nmax-width: var(--totalWidth);\r\nbackground-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\nbackground-size: cover;\r\nbackground-position: center;\r\nopacity: 0.3;\r\n  \r\n`;\r\n\r\nexport const TextTitle = styled.p`\r\n  color: var(--crimson);\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  opacity: 1; \r\n`;\r\n\r\nexport const TextSubTitle = styled.p`\r\n  color: var(--crimson);\r\n  font-size: 20px;\r\n  font-weight: 1000;\r\n`;\r\n\r\nexport const TextDescription = styled.p`\r\n  color: var(--dark-grey);\r\n  font-size: 17px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const StyledClickable = styled.div`\r\n  :active {\r\n    opacity: 0.6;\r\n  }\r\n`;\r\n\r\nexport const ResponsiveWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  background: var(--dark-grey);\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 20%;\r\n  height: 50px;\r\n  @media (min-width: 1500px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 50px;\r\n  border: none;\r\n  background-color: var(--crimson);\r\n  padding: 10px;\r\n  font-weight: bold;\r\n  color: var(--white);\r\n  width: 100px;\r\n  cursor: pointer;\r\n  box-shadow: 0px 6px 0px -2px rgba(218,165,32,0.7);\r\n  -webkit-box-shadow: 0px 6px 0px -2px rgba(218,165,32,0.7);\r\n  -moz-box-shadow: 0px 6px 0px -2px rgba(218,165,32,0.7);\r\n  :active {\r\n    box-shadow: none;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n  }\r\n`;\r\n\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"./redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"./redux/data/dataActions\";\r\nimport * as s from \"./styles/globalStyles\";\r\nimport styled from \"styled-components\";\r\nimport {create} from \"ipfs-http-client\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\n\r\nconst projectId = '22Chootq42rZtONpSIOjWfJiiBr'\r\nconst projectSecret = 'c744c2ea97fbd31b340b775fb7d25d3b'\r\nconst auth =\r\n  'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\r\nconst ipfsClient = create({\r\n  host: 'ipfs.infura.io',\r\n  port: 5001,\r\n  protocol: 'https',\r\n  headers: {\r\n    authorization: auth\r\n  }\r\n})\r\n\r\nexport const ResponsiveWrapper = styled.div`\r\n  display: flex;\r\n  flex: 0;\r\n  background: var(--dark-grey);\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 20%;\r\n  height: 200px;\r\n  @media (min-width: 100px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 50px;\r\n  border: none;\r\n  background-color: var(--crimson); \r\n  padding: 10px;\r\n  font-weight: bold;\r\n  color: var(--white);\r\n  width: 100px;\r\n  cursor: pointer;\r\n  box-shadow: 0px 6px 0px -2px rgba(218,165,32,0.7);\r\n  -webkit-box-shadow: 0px 6px 0px -2px rgba(218,165,32,0.7);\r\n  -moz-box-shadow: 0px 6px 0px -2px rgba(218,165,32,0.7);\r\n  :active {\r\n    box-shadow: none;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [loading, setLoading] = useState(false);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [NFTS, setNFTS] = useState([]);\r\n  const elementRef = useRef();\r\n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\r\n  const [name, setName] = useState(\"\");\r\n  const description = \"A collection of doodles made by Artists around the world!\";\r\n  const [background, setBackground] = useState(\"#9DAAF2\");\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  const mint = (_uri) => {\r\n    blockchain.smartContract.methods\r\n    .mint(blockchain.account, _uri)\r\n    .send({ from: blockchain.account }).once(\"error\", (err) => {\r\n      console.log(err);\r\n    }).then((receipt) => {\r\n      console.log(receipt);   \r\n      setLoading(false);\r\n      clearCanvas();\r\n      setName(\"\");\r\n      dispatch(fetchData(blockchain.account));\r\n      setStatus(\"Success! Your Doodle has been Minted\");\r\n\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\r\n    setLoading(true);\r\n    setStatus(\"Uploading to IPFS\");\r\n    try {  \r\n      const addedImage = await ipfsClient.add(_imgBuffer);\r\n      const metaDataObj = {\r\n        name: _name,\r\n        description: _des,\r\n        image: ipfsBaseUrl + addedImage.path,\r\n      };\r\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\r\n      console.log(ipfsBaseUrl + addedMetaData.path);\r\n      mint(ipfsBaseUrl + addedMetaData.path);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setLoading(false);\r\n      setStatus(\" Error :( \");\r\n    }\r\n      \r\n  };\r\n\r\n  const startMintingProcess = () => {\r\n    createMetaDataAndMint(name, description, getImageData() );\r\n    getImageData();\r\n  };\r\n\r\n  const getImageData = () => {\r\n    const canvasEl = elementRef.current;\r\n    let dataUrl = canvasEl.toDataURL(\"image/png\");\r\n    const buffer = Buffer(dataUrl.split(\",\")[1], \"base64\");\r\n    return buffer;\r\n  };\r\n\r\n  const fetchMetaDataforNFTS = async () => {     \r\n    setNFTS([]);\r\n    try { \r\n      data.allTokens.forEach((nft) => {\r\n      fetch(nft.uri)\r\n      .then((response) => response.json())\r\n      .then((metaData) => {\r\n        setNFTS((prevState) => [\r\n          ...prevState, {id: nft.id, metaData: metaData},\r\n        ])}\r\n        )}\r\n    )} catch (err) {\r\n      console.log(err); \r\n    }\r\n  };\r\n  \r\nconst clearCanvas = () => {\r\n  const canvasEl = elementRef.current;\r\n  canvasEl.clear();\r\n  setName(\"\");\r\n};\r\n\r\n  useEffect(() => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  }, [blockchain.smartContract, dispatch]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetchMetaDataforNFTS();\r\n  }, [data.allTokens]);\r\n  \r\n  return (\r\n    <s.Screen>\r\n      {blockchain.account === \"\" || blockchain.smartContract === null ? (\r\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"} image={\"/config/images/DoodleCity.jpg\" } >\r\n         <ResponsiveWrapper >\r\n         <s.SpacerXSmall/>\r\n          <s.TextTitle>Welcome to DoodleBot</s.TextTitle>\r\n          <s.SpacerXSmall/>\r\n          <s.TextTitle>Connect to Polygon</s.TextTitle>\r\n          <s.SpacerSmall />\r\n          <StyledButton\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              dispatch(connect());\r\n            }}\r\n          >\r\n            CONNECT\r\n          </StyledButton>\r\n          <s.SpacerSmall />\r\n          {blockchain.errorMsg !== \"\" ? (\r\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\r\n          ) : null}\r\n          </ResponsiveWrapper>\r\n        </s.Container>\r\n      ) : (\r\n        <s.Container flex={1} ai={\"center\"} image={\"/config/images/Scratch.jpg\" }>\r\n          <s.SpacerSmall/>\r\n          <s.StyledButton \r\n          style={{color: \"var(--crimson)\"}}><a href=\"https://opensea.io/collection/doodlebotenator\">Opensea</a> </s.StyledButton>\r\n          <s.SpacerMedium/>\r\n          <s.TextTitle style={{ textAlign: \"center\", fontSize: \"24px\" }}>\r\n            Welcome to {data.name}!\r\n          </s.TextTitle>\r\n          <s.TextDescription style={{ textAlign: \"center\" }}>\r\n            Mint your doodles for the cost of gas\r\n          </s.TextDescription>\r\n        \r\n        <s.SpacerMedium/>\r\n        <s.Container ai={\"center\"} >\r\n             <s.TextDescription style={{ textAlign: \"center\" }}>\r\n            Select your canvas color: then Clear \r\n            </s.TextDescription>     \r\n            <form action=\"/action_page.php\">\r\n            <input \r\n            type=\"color\"\r\n            id=\"favcolor\" \r\n            name=\"favcolor\" \r\n            value={background}\r\n            onChange ={(e) => {\r\n            e.preventDefault();\r\n            setBackground(e.target.value); }} />\r\n            </form>\r\n        </s.Container>\r\n          <s.SpacerXSmall/>\r\n          {loading ? (\r\n         <>\r\n          <s.SpacerXSmall/>\r\n          <s.TextDescription style={{ textAlign: \"center\" }}>\r\n            loading...\r\n          </s.TextDescription>\r\n         </> ) : null}\r\n         {status !== \"\" ? (\r\n         <>\r\n          <s.SpacerXSmall/>\r\n          <s.TextDescription style={{ textAlign: \"center\" }}>\r\n            {status}...\r\n          </s.TextDescription>\r\n         </> ) : null}\r\n         <s.SpacerSmall/>\r\n        <SignatureCanvas \r\n        \r\n          backgroundColor={background}  \r\n          canvasProps={{width: 350, height: 350}}\r\n          ref={elementRef}  \r\n        />\r\n        <s.SpacerMedium/>\r\n        <s.TextSubTitle>\r\n        Name your doodle:\r\n        </s.TextSubTitle><s.SpacerXSmall/>\r\n        <form onSubmit = {handleSubmit} >\r\n          <input\r\n          type=\"text\" \r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n        </form>\r\n        <s.Container fd={\"row\"} jc={\"center\"} style={{ padding: 16 }}>\r\n        <StyledButton\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              startMintingProcess();\r\n            }}\r\n          > Mint\r\n          </StyledButton>\r\n          <s.SpacerSmall/>\r\n          <StyledButton\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              clearCanvas();\r\n            }}\r\n          > Clear \r\n          </StyledButton>\r\n          </s.Container>\r\n          \r\n          \r\n            \r\n           {data.loading ? (\r\n              <>\r\n              <s.SpacerXSmall/>\r\n              <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                loading...\r\n              </s.TextDescription>\r\n              </> ) :\r\n              NFTS.map((nft, index) => {\r\n                return ( \r\n                  <s.ResponsiveWrapper  key={index} style={{ padding: 8  }}> \r\n                  <s.TextTitle >{nft.metaData.name}</s.TextTitle>\r\n                  <img \r\n                  alt={nft.metaData.name} \r\n                  src={nft.metaData.image}\r\n                  width={150}\r\n                  />\r\n                  </s.ResponsiveWrapper>\r\n                );\r\n            })} \r\n            \r\n        </s.Container>\r\n      )}\r\n    </s.Screen>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const abiResponse = await fetch(\"/config/abi.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const abi = await abiResponse.json();\r\n    const configResponse = await fetch(\"/config/config.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const CONFIG = await configResponse.json();\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      let web3 = new Web3(ethereum);\r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        if (networkId == CONFIG.NETWORK.ID) {\r\n          const SmartContractObj = new Web3EthContract(\r\n            abi,\r\n            CONFIG.CONTRACT_ADDRESS\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./styles/reset.css\";\r\nimport \"./styles/theme.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let name = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.name()\r\n        .call();\r\n\r\n      let allTokens = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.getAllTokens()\r\n        .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          name,\r\n          allTokens,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n","const initialState = {\r\n  loading: false,\r\n  account: null,\r\n  smartContract: null,\r\n  web3: null,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CONNECTION_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CONNECTION_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        account: action.payload.account,\r\n        smartContract: action.payload.smartContract,\r\n        web3: action.payload.web3,\r\n      };\r\n    case \"CONNECTION_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMsg: action.payload,\r\n      };\r\n    case \"UPDATE_ACCOUNT\":\r\n      return {\r\n        ...state,\r\n        account: action.payload.account,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default blockchainReducer;\r\n","const initialState = {\r\n  loading: false,\r\n  name: \"\",\r\n  allTokens: [],\r\n  error: false,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHECK_DATA_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CHECK_DATA_SUCCESS\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        name: action.payload.name,\r\n        allTokens: action.payload.allTokens\r\n      };\r\n    case \"CHECK_DATA_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        error: true,\r\n        errorMsg: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\r\nimport dataReducer from \"./data/dataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  blockchain: blockchainReducer,\r\n  data: dataReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers = compose(applyMiddleware(...middleware));\r\n\r\nconst configureStore = () => {\r\n  return createStore(rootReducer, composeEnhancers);\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n"],"sourceRoot":""}